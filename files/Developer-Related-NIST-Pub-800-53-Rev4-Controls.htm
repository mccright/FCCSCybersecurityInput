<html>
<head>
<title>Dev-Related NIST 800-53R4</title>
<meta charset="UTF-8" /> 
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<style>
table, th, td {
  border: .5px solid gray;
  border-collapse: collapse;
  background-color: #eee3;
}
th {
  text-align: center;
}
th, td {
  padding: 5px;
}
</style>
</head>
<body>
<h1>Developer-Related NIST Pub 800-53 Rev4 Controls</h1>
<p>
81 Controls directly associated with 'development,' 'coding,' or 'source code' in <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf" target="_blank">NIST SP 800-53 Rev. 4</a>.
</p>
They include (but are not limited to):
<ol>
<li>ACCESS CONTROL&nbsp;&nbsp;&nbsp;&nbsp;AC-2&nbsp;&nbsp;&nbsp;&nbsp;ACCOUNT MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Information system account types include, for example, individual, shared, group, system, guest/anonymous, emergency, developer/manufacturer/vendor, temporary, and service. Some of the account management requirements listed above can be implemented by organizational information systems. The identification of authorized users of the information system and the specification of access privileges reflects the requirements in other security controls in the security plan. Users requiring administrative privileges on information system accounts receive additional scrutiny by appropriate organizational personnel (e.g., system owner, mission/business owner, or chief information security officer) responsible for approving such accounts and privileged access. Organizations may choose to define access privileges or other attributes by account, by type of account, or a combination of both. Other attributes required for authorizing access include, for example, restrictions on time-of-day, day-of-week, and point-of-origin. In defining other account attributes, organizations consider system-related requirements (e.g., scheduled maintenance, system upgrades) and mission/business requirements, (e.g., time zone differences, customer requirements, remote access to support travel requirements). Failure to consider these factors could affect information system availability. Temporary and emergency accounts are accounts intended for short-term use. Organizations establish temporary accounts as a part of normal account activation procedures when there is a need for short-term accounts without the demand for immediacy in account activation. Organizations establish emergency accounts in response to crisis situations and with the need for rapid account activation. Therefore, emergency account activation may bypass normal account authorization processes. Emergency and temporary accounts are not to be confused with infrequently used accounts (e.g., local logon accounts used for special tasks defined by organizations or when network resources are unavailable). Such accounts remain available and are not subject to automatic disabling or removal dates. Conditions for disabling or deactivating accounts include, for example: (i) when shared/group, emergency, or temporary accounts are no longer required; or (ii) when individuals are transferred or terminated. Some types of information system accounts may require specialized training."&nbsp;&nbsp;&nbsp;&nbsp;AC-3,AC-4,AC-5,AC-6,AC-10,AC-17,AC-19,AC-20,AU-9,IA-2,IA-4,IA-5,IA-8,CM-5,CM-6,CM-11,MA-3,MA-4,MA-5,PL-4,SC-13
</li>
<li>ACCESS CONTROL&nbsp;&nbsp;&nbsp;&nbsp;AC-4 (14)&nbsp;&nbsp;&nbsp;&nbsp;SECURITY POLICY FILTER CONSTRAINTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The information system, when transferring information between different security domains, implements [Assignment: organization-defined security policy filters] requiring fully enumerated formats that restrict data structure and content."&nbsp;&nbsp;&nbsp;&nbsp;"Data structure and content restrictions reduce the range of potential malicious and/or unsanctioned content in cross-domain transactions. Security policy filters that restrict data structures include, for example, restricting file sizes and field lengths. Data content policy filters include, for example: (i) encoding formats for character sets (e.g., Universal Character Set Transformation Formats, American Standard Code for Information Interchange); (ii) restricting character data fields to only contain alpha-numeric characters; (iii) prohibiting special characters; and (iv) validating schema structures."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>AWARENESS AND TRAINING&nbsp;&nbsp;&nbsp;&nbsp;AT-3&nbsp;&nbsp;&nbsp;&nbsp;ROLE-BASED SECURITY TRAINING&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization provides role-based security training to personnel with assigned security roles and responsibilities:"&nbsp;&nbsp;&nbsp;&nbsp;"Organizations determine the appropriate content of security training based on the assigned roles and responsibilities of individuals and the specific security requirements of organizations and the information systems to which personnel have authorized access. In addition, organizations provide enterprise architects, information system developers, software developers, acquisition/procurement officials, information system managers, system/network administrators, personnel conducting configuration management and auditing activities, personnel performing independent verification and validation activities, security control assessors, and other personnel having access to system-level software, adequate security-related technical training specifically tailored for their assigned duties. Comprehensive role-based training addresses management, operational, and technical roles and responsibilities covering physical, personnel, and technical safeguards and countermeasures. Such training can include for example, policies, procedures, tools, and artifacts for the organizational security roles defined. Organizations also provide the training necessary for individuals to carry out their responsibilities related to operations and supply chain security within the context of organizational information security programs. Role-based security training also applies to contractors providing services to federal agencies."&nbsp;&nbsp;&nbsp;&nbsp;AT-2,AT-4,PL-4,PS-7,SA-3,SA-12,SA-16
</li>
<li>AWARENESS AND TRAINING&nbsp;&nbsp;&nbsp;&nbsp;AT-3 (3)&nbsp;&nbsp;&nbsp;&nbsp;PRACTICAL EXERCISES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization includes practical exercises in security training that reinforce training objectives."&nbsp;&nbsp;&nbsp;&nbsp;"Practical exercises may include, for example, security training for software developers that includes simulated cyber attacks exploiting common software vulnerabilities (e.g., buffer overflows), or spear/whale phishing attacks targeted at senior leaders/executives. These types of practical exercises help developers better understand the effects of such vulnerabilities and appreciate the need for security coding standards and processes."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>CONFIGURATION MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;CM-5 (5)&nbsp;&nbsp;&nbsp;&nbsp;LIMIT PRODUCTION / OPERATIONAL PRIVILEGES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"In many organizations, information systems support multiple core missions/business functions. Limiting privileges to change information system components with respect to operational systems is necessary because changes to a particular information system component may have far-reaching effects on mission/business processes supported by the system where the component resides. The complex, many-to-many relationships between systems and mission/business processes are in some cases, unknown to developers."&nbsp;&nbsp;&nbsp;&nbsp;AC-2
</li>
<li>CONFIGURATION MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;CM-6&nbsp;&nbsp;&nbsp;&nbsp;CONFIGURATION SETTINGS&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Configuration settings are the set of parameters that can be changed in hardware, software, or firmware components of the information system that affect the security posture and/or functionality of the system. Information technology products for which security-related configuration settings can be defined include, for example, mainframe computers, servers (e.g., database, electronic mail, authentication, web, proxy, file, domain name), workstations, input/output devices (e.g.,  scanners, copiers, and printers), network components (e.g., firewalls, routers, gateways, voice and data switches, wireless access points, network appliances, sensors), operating systems, middleware, and applications. Security-related parameters are those parameters impacting the security state of information systems including the parameters required to satisfy other security control requirements. Security-related parameters include, for example: (i) registry settings; (ii) account, file, directory permission settings; and (iii) settings for functions, ports, protocols, services, and remote connections. Organizations establish organization-wide configuration settings and subsequently derive specific settings for information systems. The established settings become part of the systems configuration baseline. Common secure configurations (also referred to as security configuration checklists, lockdown and hardening guides, security reference guides, security technical implementation guides) provide recognized, standardized, and established benchmarks that stipulate secure configuration settings for specific information technology platforms/products and instructions for configuring those information system components to meet operational requirements. Common secure configurations can be developed by a variety of organizations including, for example, information technology product developers, manufacturers, vendors, consortia, academia, industry, federal agencies, and other organizations in the public and private sectors. Common secure configurations include the United States Government Configuration Baseline (USGCB) which affects the implementation of CM-6 and other controls such as AC-19 and CM-7. The Security Content Automation Protocol (SCAP) and the defined standards within the protocol (e.g., Common Configuration Enumeration) provide an effective method to uniquely identify, track, and control configuration settings. OMB establishes federal policy on configuration requirements for federal information systems."&nbsp;&nbsp;&nbsp;&nbsp;AC-19,CM-2,CM-3,CM-7,SI-4
</li>
<li>CONFIGURATION MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;CM-9 (1)&nbsp;&nbsp;&nbsp;&nbsp;ASSIGNMENT OF RESPONSIBILITY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization assigns responsibility for developing the configuration management process to organizational personnel that are not directly involved in information system development."&nbsp;&nbsp;&nbsp;&nbsp;"In the absence of dedicated configuration management teams assigned within organizations, system developers may be tasked to develop configuration management processes using personnel who are not directly involved in system development or integration. This separation of duties ensures that organizations establish and maintain a sufficient degree of independence between the information system development and integration processes and configuration management processes to facilitate quality control and more effective oversight."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>CONFIGURATION MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;CM-10 (1)&nbsp;&nbsp;&nbsp;&nbsp;OPEN SOURCE SOFTWARE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization establishes the following restrictions on the use of open source software: [Assignment: organization-defined restrictions]."&nbsp;&nbsp;&nbsp;&nbsp;"Open source software refers to software that is available in source code form. Certain software rights normally reserved for copyright holders are routinely provided under software license agreements that permit individuals to study, change, and improve the software. From a security perspective, the major advantage of open source software is that it provides organizations with the ability to examine the source code. However, there are also various licensing issues associated with open source software including, for example, the constraints on derivative use of such software."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>IDENTIFICATION AND AUTHENTICATION&nbsp;&nbsp;&nbsp;&nbsp;IA-5&nbsp;&nbsp;&nbsp;&nbsp;AUTHENTICATOR MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization manages information system authenticators by:"&nbsp;&nbsp;&nbsp;&nbsp;"Individual authenticators include, for example, passwords, tokens, biometrics, PKI certificates, and key cards. Initial authenticator content is the actual content (e.g., the initial password) as opposed to requirements about authenticator content (e.g., minimum password length). In many cases, developers ship information system components with factory default authentication credentials to allow for initial installation and configuration. Default authentication credentials are often well known, easily discoverable, and present a significant security risk. The requirement to protect individual authenticators may be implemented via control PL-4 or PS-6 for authenticators in the possession of individuals and by controls AC-3, AC-6, and SC-28 for authenticators stored within organizational information systems (e.g., passwords stored in hashed or encrypted formats, files containing encrypted or hashed passwords accessible with administrator privileges). Information systems support individual authenticator management by organization-defined settings and restrictions for various authenticator characteristics including, for example, minimum password length, password composition, validation time window for time synchronous one-time tokens, and number of allowed rejections during the verification stage of biometric authentication. Specific actions that can be taken to safeguard authenticators include, for example, maintaining possession of individual authenticators, not loaning or sharing individual authenticators with others, and reporting lost, stolen, or compromised authenticators immediately. Authenticator management includes issuing and revoking, when no longer needed, authenticators for temporary access such as that required for remote maintenance. Device authenticators include, for example, certificates and passwords."&nbsp;&nbsp;&nbsp;&nbsp;AC-2,AC-3,AC-6,CM-6,IA-2,IA-4,IA-8,PL-4,PS-5,PS-6,SC-12,SC-13,SC-17,SC-28
</li>
<li>IDENTIFICATION AND AUTHENTICATION&nbsp;&nbsp;&nbsp;&nbsp;IA-5 (5)&nbsp;&nbsp;&nbsp;&nbsp;CHANGE AUTHENTICATORS PRIOR TO DELIVERY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires developers/installers of information system components to provide unique authenticators or change default authenticators prior to delivery/installation."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement extends the requirement for organizations to change default authenticators upon information system installation, by requiring developers and/or installers to provide unique authenticators or change default authenticators for system components prior to delivery and/or installation. However, it typically does not apply to the developers of commercial off-the-shelve information technology products. Requirements for unique authenticators can be included in acquisition documents prepared by organizations when procuring information systems or system components."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>INCIDENT RESPONSE&nbsp;&nbsp;&nbsp;&nbsp;IR-4 (8)&nbsp;&nbsp;&nbsp;&nbsp;CORRELATION WITH EXTERNAL ORGANIZATIONS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization coordinates with [Assignment: organization-defined external organizations] to correlate and share [Assignment: organization-defined incident information] to achieve a cross-organization perspective on incident awareness and more effective incident responses."&nbsp;&nbsp;&nbsp;&nbsp;"The coordination of incident information with external organizations including, for example, mission/business partners, military/coalition partners, customers, and multitiered developers, can provide significant benefits. Cross-organizational coordination with respect to incident handling can serve as an important risk management capability. This capability allows organizations to leverage critical information from a variety of sources to effectively respond to information security-related incidents potentially affecting the organizationï¿½s operations, assets, and individuals."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>INCIDENT RESPONSE&nbsp;&nbsp;&nbsp;&nbsp;IR-4 (10)&nbsp;&nbsp;&nbsp;&nbsp;SUPPLY CHAIN COORDINATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization coordinates incident handling activities involving supply chain events with other organizations involved in the supply chain."&nbsp;&nbsp;&nbsp;&nbsp;"Organizations involved in supply chain activities include, for example, system/product developers, integrators, manufacturers, packagers, assemblers, distributors, vendors, and resellers. Supply chain incidents include, for example, compromises/breaches involving information system components, information technology products, development processes or personnel, and distribution processes or warehousing facilities."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>INCIDENT RESPONSE&nbsp;&nbsp;&nbsp;&nbsp;IR-6 (3)&nbsp;&nbsp;&nbsp;&nbsp;COORDINATION WITH SUPPLY CHAIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization provides security incident information to other organizations involved in the supply chain for information systems or information system components related to the incident."&nbsp;&nbsp;&nbsp;&nbsp;"Organizations involved in supply chain activities include, for example, system/product developers, integrators, manufacturers, packagers, assemblers, distributors, vendors, and resellers. Supply chain incidents include, for example, compromises/breaches involving information system components, information technology products, development processes or personnel, and distribution processes or warehousing facilities. Organizations determine the appropriate information to share considering the value gained from support by external organizations with the potential for harm due to sensitive information being released to outside organizations of perhaps questionable trustworthiness."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>INCIDENT RESPONSE&nbsp;&nbsp;&nbsp;&nbsp;IR-10&nbsp;&nbsp;&nbsp;&nbsp;INTEGRATED INFORMATION SECURITY ANALYSIS TEAM&nbsp;&nbsp;&nbsp;&nbsp;P0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization establishes an integrated team of forensic/malicious code analysts, tool developers, and real-time operations personnel."&nbsp;&nbsp;&nbsp;&nbsp;"Having an integrated team for incident response facilitates information sharing. Such capability allows organizational personnel, including developers, implementers, and operators, to leverage the team knowledge of the threat in order to implement defensive measures that will enable organizations to deter intrusions more effectively. Moreover, it promotes the rapid detection of intrusions, development of appropriate mitigations, and the deployment of effective defensive measures. For example, when an intrusion is detected, the integrated security analysis team can rapidly develop an appropriate response for operators to implement, correlate the new incident with information on past intrusions, and augment ongoing intelligence development. This enables the team to identify adversary TTPs that are linked to the operations tempo or to specific missions/business functions, and to define responsive actions in a way that does not disrupt the mission/business operations. Ideally, information security analysis teams are distributed within organizations to make the capability more resilient."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>PLANNING&nbsp;&nbsp;&nbsp;&nbsp;PL-8&nbsp;&nbsp;&nbsp;&nbsp;INFORMATION SECURITY ARCHITECTURE&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"This control addresses actions taken by organizations in the design and development of information systems. The information security architecture at the individual information system level is consistent with and complements the more global, organization-wide information security architecture described in PM-7 that is integral to and developed as part of the enterprise architecture. The information security architecture includes an architectural description, the placement/allocation of security functionality (including security controls), security-related information for external interfaces, information being exchanged across the interfaces, and the protection mechanisms associated with each interface. In addition, the security architecture can include other important security-related information, for example, user roles and access privileges assigned to each role, unique security requirements, the types of information processed, stored, and transmitted by the information system, restoration priorities of information and information system services, and any other specific protection needs. In todayï¿½s modern architecture, it is becoming less common for organizations to control all information resources. There are going to be key dependencies on external information services and service providers. Describing such dependencies in the information security architecture is important to developing a comprehensive mission/business protection strategy. Establishing, developing, documenting, and maintaining under configuration control, a baseline configuration for organizational information systems is critical to implementing and maintaining an effective information security architecture. The development of the information security architecture is coordinated with the Senior Agency Official for Privacy (SAOP)/Chief Privacy Officer (CPO) to ensure that security controls needed to support privacy requirements are identified and effectively implemented. PL-8 is primarily directed at organizations (i.e., internally focused) to help ensure that organizations develop an information security architecture for the information system, and that the security architecture is integrated with or tightly coupled to the enterprise architecture through the organization-wide information security architecture. In contrast, SA-17 is primarily directed at external information technology product/system developers and integrators (although SA-17 could be used internally within organizations for in-house system development). SA-17, which is complementary to PL-8, is selected when organizations outsource the development of information systems or information system components to external entities, and there is a need to demonstrate/show consistency with the organizationï¿½s enterprise architecture and information security architecture."&nbsp;&nbsp;&nbsp;&nbsp;CM-2,CM-6,PL-2,PM-7,SA-5,SA-17,Appendix J
</li>
<li>RISK ASSESSMENT&nbsp;&nbsp;&nbsp;&nbsp;RA-5&nbsp;&nbsp;&nbsp;&nbsp;VULNERABILITY SCANNING&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Security categorization of information systems guides the frequency and comprehensiveness of vulnerability scans. Organizations determine the required vulnerability scanning for all information system components, ensuring that potential sources of vulnerabilities such as networked printers, scanners, and copiers are not overlooked. Vulnerability analyses for custom software applications may require additional approaches such as static analysis, dynamic analysis, binary analysis, or a hybrid of the three approaches. Organizations can employ these analysis approaches in a variety of tools (e.g., web-based application scanners, static analysis tools, binary analyzers) and in source code reviews. Vulnerability scanning includes, for example: (i) scanning for patch levels; (ii) scanning for functions, ports, protocols, and services that should not be accessible to users or devices; and (iii) scanning for improperly configured or incorrectly operating information flow control mechanisms. Organizations consider using tools that express vulnerabilities in the Common Vulnerabilities and Exposures (CVE) naming convention and that use the Open Vulnerability Assessment Language (OVAL) to determine/test for the presence of vulnerabilities. Suggested sources for vulnerability information include the Common Weakness Enumeration (CWE) listing and the National Vulnerability Database (NVD). In addition, security control assessments such as red team exercises provide other sources of potential vulnerabilities for which to scan. Organizations also consider using tools that express vulnerability impact by the Common Vulnerability Scoring System (CVSS)."&nbsp;&nbsp;&nbsp;&nbsp;CA-2,CA-7,CM-4,CM-6,RA-2,RA-3,SA-11,SI-2
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-3&nbsp;&nbsp;&nbsp;&nbsp;SYSTEM DEVELOPMENT LIFE CYCLE&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"A well-defined system development life cycle provides the foundation for the successful development, implementation, and operation of organizational information systems. To apply the required security controls within the system development life cycle requires a basic understanding of information security, threats, vulnerabilities, adverse impacts, and risk to critical missions/business functions. The security engineering principles in SA-8 cannot be properly applied if individuals that design, code, and test information systems and system components (including information technology products) do not understand security. Therefore, organizations include qualified personnel, for example, chief information security officers, security architects, security engineers, and information system security officers in system development life cycle activities to ensure that security requirements are incorporated into organizational information systems. It is equally important that developers include individuals on the development team that possess the requisite security expertise and skills to ensure that needed security capabilities are effectively integrated into the information system. Security awareness and training programs can help ensure that individuals having key security roles and responsibilities have the appropriate experience, skills, and expertise to conduct assigned system development life cycle activities. The effective integration of security requirements into enterprise architecture also helps to ensure that important security considerations are addressed early in the system development life cycle and that those considerations are directly related to the organizational mission/business processes. This process also facilitates the integration of the information security architecture into the enterprise architecture, consistent with organizational risk management and information security strategies."&nbsp;&nbsp;&nbsp;&nbsp;AT-3,PM-7,SA-8
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-4 (1)&nbsp;&nbsp;&nbsp;&nbsp;FUNCTIONAL PROPERTIES OF SECURITY CONTROLS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to provide a description of the functional properties of the security controls to be employed."&nbsp;&nbsp;&nbsp;&nbsp;"Functional properties of security controls describe the functionality (i.e., security capability, functions, or mechanisms) visible at the interfaces of the controls and specifically exclude functionality and data structures internal to the operation of the controls."&nbsp;&nbsp;&nbsp;&nbsp;SA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-4 (2)&nbsp;&nbsp;&nbsp;&nbsp;DESIGN / IMPLEMENTATION INFORMATION FOR SECURITY CONTROLS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to provide design and implementation information for the security controls to be employed that includes: [Selection (one or more): security-relevant external system interfaces; high-level design; low-level design; source code or hardware schematics; [Assignment: organization-defined design/implementation information]] at [Assignment: organization-defined level of detail]."&nbsp;&nbsp;&nbsp;&nbsp;"Organizations may require different levels of detail in design and implementation documentation for security controls employed in organizational information systems, system components, or information system services based on mission/business requirements, requirements for trustworthiness/resiliency, and requirements for analysis and testing. Information systems can be partitioned into multiple subsystems. Each subsystem within the system can contain one or more modules. The high-level design for the system is expressed in terms of multiple subsystems and the interfaces between subsystems providing security-relevant functionality. The low-level design for the system is expressed in terms of modules with particular emphasis on software and firmware (but not excluding hardware) and the interfaces between modules providing security-relevant functionality. Source code and hardware schematics are typically referred to as the implementation representation of the information system."&nbsp;&nbsp;&nbsp;&nbsp;SA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-4 (3)&nbsp;&nbsp;&nbsp;&nbsp;DEVELOPMENT METHODS / TECHNIQUES / PRACTICES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to demonstrate the use of a system development life cycle that includes [Assignment: organization-defined state-of-the-practice system/security engineering methods, software development methods, testing/evaluation/validation techniques, and quality control processes]."&nbsp;&nbsp;&nbsp;&nbsp;"Following a well-defined system development life cycle that includes state-of-the-practice software development methods, systems/security engineering methods, quality control processes, and testing, evaluation, and validation techniques helps to reduce the number and severity of latent errors within information systems, system components, and information system services. Reducing the number/severity of such errors reduces the number of vulnerabilities in those systems, components, and services."&nbsp;&nbsp;&nbsp;&nbsp;SA-12
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-4 (5)&nbsp;&nbsp;&nbsp;&nbsp;SYSTEM / COMPONENT / SERVICE CONFIGURATIONS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Security configurations include, for example, the U.S. Government Configuration Baseline (USGCB) and any limitations on functions, ports, protocols, and services. Security characteristics include, for example, requiring that all default passwords have been changed."&nbsp;&nbsp;&nbsp;&nbsp;CM-8
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-4 (8)&nbsp;&nbsp;&nbsp;&nbsp;CONTINUOUS MONITORING PLAN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to produce a plan for the continuous monitoring of security control effectiveness that contains [Assignment: organization-defined level of detail]."&nbsp;&nbsp;&nbsp;&nbsp;"The objective of continuous monitoring plans is to determine if the complete set of planned, required, and deployed security controls within the information system, system component, or information system service continue to be effective over time based on the inevitable changes that occur. Developer continuous monitoring plans include a sufficient level of detail such that the information can be incorporated into the continuous monitoring strategies and programs implemented by organizations."&nbsp;&nbsp;&nbsp;&nbsp;CA-7
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-4 (9)&nbsp;&nbsp;&nbsp;&nbsp;FUNCTIONS / PORTS / PROTOCOLS / SERVICES IN USE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to identify early in the system development life cycle, the functions, ports, protocols, and services intended for organizational use."&nbsp;&nbsp;&nbsp;&nbsp;"The identification of functions, ports, protocols, and services early in the system development life cycle (e.g., during the initial requirements definition and design phases) allows organizations to influence the design of the information system, information system component, or information system service. This early involvement in the life cycle helps organizations to avoid or minimize the use of functions, ports, protocols, or services that pose unnecessarily high risks and understand the trade-offs involved in blocking specific ports, protocols, or services (or when requiring information system service providers to do so). Early identification of functions, ports, protocols, and services avoids costly retrofitting of security controls after the information system, system component, or information system service has been implemented. SA-9 describes requirements for external information system services with organizations identifying which functions, ports, protocols, and services are provided from external sources."&nbsp;&nbsp;&nbsp;&nbsp;CM-7,SA-9
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-5&nbsp;&nbsp;&nbsp;&nbsp;INFORMATION SYSTEM DOCUMENTATION&nbsp;&nbsp;&nbsp;&nbsp;P2&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"This control helps organizational personnel understand the implementation and operation of security controls associated with information systems, system components, and information system services. Organizations consider establishing specific measures to determine the quality/completeness of the content provided. The inability to obtain needed documentation may occur, for example, due to the age of the information system/component or lack of support from developers and contractors. In those situations, organizations may need to recreate selected documentation if such documentation is essential to the effective implementation or operation of security controls. The level of protection provided for selected information system, component, or service documentation is commensurate with the security category or classification of the system. For example, documentation associated with a key DoD weapons system or command and control system would typically require a higher level of protection than a routine administrative system. Documentation that addresses information system vulnerabilities may also require an increased level of protection. Secure operation of the information system, includes, for example, initially starting the system and resuming secure system operation after any lapse in system operation."&nbsp;&nbsp;&nbsp;&nbsp;CM-6,CM-8,PL-2,PL-4,PS-2,SA-3,SA-4
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-5 (5)&nbsp;&nbsp;&nbsp;&nbsp;SOURCE CODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"[Withdrawn: Incorporated into SA-4 (2)]."&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-8&nbsp;&nbsp;&nbsp;&nbsp;SECURITY ENGINEERING PRINCIPLES&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization applies information system security engineering principles in the specification, design, development, implementation, and modification of the information system."&nbsp;&nbsp;&nbsp;&nbsp;"Organizations apply security engineering principles primarily to new development information systems or systems undergoing major upgrades. For legacy systems, organizations apply security engineering principles to system upgrades and modifications to the extent feasible, given the current state of hardware, software, and firmware within those systems. Security engineering principles include, for example: (i) developing layered protections; (ii) establishing sound security policy, architecture, and controls as the foundation for design; (iii) incorporating security requirements into the system development life cycle; (iv) delineating physical and logical security boundaries; (v) ensuring that system developers are trained on how to build secure software; (vi) tailoring security controls to meet organizational and operational needs; (vii) performing threat modeling to identify use cases, threat agents, attack vectors, and attack patterns as well as compensating controls and design patterns needed to mitigate risk; and (viii) reducing risk to acceptable levels, thus enabling informed risk management decisions."&nbsp;&nbsp;&nbsp;&nbsp;PM-7,SA-3,SA-4,SA-17,SC-2,SC-3
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10&nbsp;&nbsp;&nbsp;&nbsp;DEVELOPER CONFIGURATION MANAGEMENT&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"This control also applies to organizations conducting internal information systems development and integration. Organizations consider the quality and completeness of the configuration management activities conducted by developers as evidence of applying effective security safeguards. Safeguards include, for example, protecting from unauthorized modification or destruction, the master copies of all material used to generate security-relevant portions of the system hardware, software, and firmware. Maintaining the integrity of changes to the information system, information system component, or information system service requires configuration control throughout the system development life cycle to track authorized changes and prevent unauthorized changes. Configuration items that are placed under configuration management (if existence/use is required by other security controls) include: the formal model; the functional, high-level, and low-level design specifications; other design data; implementation documentation; source code and hardware schematics; the running version of the object code; tools for comparing new versions of security-relevant hardware descriptions and software/firmware source code with previous versions; and test fixtures and documentation. Depending on the mission/business needs of organizations and the nature of the contractual relationships in place, developers may provide configuration management support during the operations and maintenance phases of the life cycle."&nbsp;&nbsp;&nbsp;&nbsp;CM-3,CM-4,CM-9,SA-12,SI-2
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10 (1)&nbsp;&nbsp;&nbsp;&nbsp;SOFTWARE / FIRMWARE INTEGRITY VERIFICATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to enable integrity verification of software and firmware components."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement allows organizations to detect unauthorized changes to software and firmware components through the use of tools, techniques, and/or mechanisms provided by developers. Integrity checking mechanisms can also address counterfeiting of software and firmware components. Organizations verify the integrity of software and firmware components, for example, through secure one-way hashes provided by developers. Delivered software and firmware components also include any updates to such components."&nbsp;&nbsp;&nbsp;&nbsp;SI-7
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10 (2)&nbsp;&nbsp;&nbsp;&nbsp;ALTERNATIVE CONFIGURATION MANAGEMENT PROCESSES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization provides an alternate configuration management process using organizational personnel in the absence of a dedicated developer configuration management team."&nbsp;&nbsp;&nbsp;&nbsp;"Alternate configuration management processes may be required, for example, when organizations use commercial off-the-shelf (COTS) information technology products. Alternate configuration management processes include organizational personnel that: (i) are responsible for reviewing/approving proposed changes to information systems, system components, and information system services; and (ii) conduct security impact analyses prior to the implementation of any changes to systems, components, or services (e.g., a configuration control board that considers security impacts of changes during development and includes representatives of both the organization and the developer, when applicable)."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10 (3)&nbsp;&nbsp;&nbsp;&nbsp;HARDWARE INTEGRITY VERIFICATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to enable integrity verification of hardware components."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement allows organizations to detect unauthorized changes to hardware components through the use of tools, techniques, and/or mechanisms provided by developers. Organizations verify the integrity of hardware components, for example, with hard-to-copy labels and verifiable serial numbers provided by developers, and by requiring the implementation of anti-tamper technologies. Delivered hardware components also include updates to such components."&nbsp;&nbsp;&nbsp;&nbsp;SI-7
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10 (4)&nbsp;&nbsp;&nbsp;&nbsp;TRUSTED GENERATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to employ tools for comparing newly generated versions of security-relevant hardware descriptions and software/firmware source and object code with previous versions."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement addresses changes to hardware, software, and firmware components between versions during development. In contrast, SA-10 (1) and SA-10 (3) allow organizations to detect unauthorized changes to hardware, software, and firmware components through the use of tools, techniques, and/or mechanisms provided by developers."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10 (5)&nbsp;&nbsp;&nbsp;&nbsp;MAPPING INTEGRITY FOR VERSION CONTROL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to maintain the integrity of the mapping between the  master build data (hardware drawings and software/firmware code) describing the current version of security-relevant hardware, software, and firmware and the on-site master copy of the data for the current version."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement addresses changes to hardware, software, and firmware components during initial development and during system life cycle updates. Maintaining the integrity between the master copies of security-relevant hardware, software, and firmware (including designs and source code) and the equivalent data in master copies on-site in operational environments is essential to ensure the availability of organizational information systems supporting critical missions and/or business functions."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-10 (6)&nbsp;&nbsp;&nbsp;&nbsp;TRUSTED DISTRIBUTION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to execute procedures for ensuring that security-relevant hardware, software, and firmware updates distributed to the organization are exactly as specified by the master copies."&nbsp;&nbsp;&nbsp;&nbsp;"The trusted distribution of security-relevant hardware, software, and firmware updates helps to ensure that such updates are faithful representations of the master copies maintained by the developer and have not been tampered with during distribution."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11&nbsp;&nbsp;&nbsp;&nbsp;DEVELOPER SECURITY TESTING AND EVALUATION&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Developmental security testing/evaluation occurs at all post-design phases of the system development life cycle. Such testing/evaluation confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements. Security properties of information systems may be affected by the interconnection of system components or changes to those components. These interconnections or changes (e.g., upgrading or replacing applications and operating systems) may adversely affect previously implemented security controls. This control provides additional types of security testing/evaluation that developers can conduct to reduce or eliminate potential flaws. Testing custom software applications may require approaches such as static analysis, dynamic analysis, binary analysis, or a hybrid of the three approaches. Developers can employ these analysis approaches in a variety of tools (e.g., web-based application scanners, static analysis tools, binary analyzers) and in source code reviews. Security assessment plans provide the specific activities that developers plan to carry out including the types of analyses, testing, evaluation, and reviews of software and firmware components, the degree of rigor to be applied, and the types of artifacts produced during those processes. The depth of security testing/evaluation refers to the rigor and level of detail associated with the assessment process (e.g., black box, gray box, or white box testing). The coverage of security testing/evaluation refers to the scope (i.e., number and type) of the artifacts included in the assessment process. Contracts specify the acceptance criteria for security assessment plans, flaw remediation processes, and the evidence that the plans/processes have been diligently applied. Methods for reviewing and protecting assessment plans, evidence, and documentation are commensurate with the security category or classification level of the information system. Contracts may specify documentation protection requirements."&nbsp;&nbsp;&nbsp;&nbsp;CA-2,CM-4,SA-3,SA-4,SA-5,SI-2
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (1)&nbsp;&nbsp;&nbsp;&nbsp;STATIC CODE ANALYSIS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to employ static code analysis tools to identify common flaws and document the results of the analysis."&nbsp;&nbsp;&nbsp;&nbsp;"Static code analysis provides a technology and methodology for security reviews. Such analysis can be used to identify security vulnerabilities and enforce security coding practices. Static code analysis is most effective when used early in the development process, when each code change can be automatically scanned for potential weaknesses. Static analysis can provide clear remediation guidance along with defects to enable developers to fix such defects. Evidence of correct implementation of static analysis can include, for example, aggregate defect density for critical defect types, evidence that defects were inspected by developers or security professionals, and evidence that defects were fixed. An excessively high density of ignored findings (commonly referred to as ignored or false positives) indicates a potential problem with the analysis process or tool. In such cases, organizations weigh the validity of the evidence against evidence from other sources."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (2)&nbsp;&nbsp;&nbsp;&nbsp;THREAT AND VULNERABILITY ANALYSES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to perform threat and vulnerability analyses and subsequent testing/evaluation of the as-built system, component, or service."&nbsp;&nbsp;&nbsp;&nbsp;"Applications may deviate significantly from the functional and design specifications created during the requirements and design phases of the system development life cycle. Therefore, threat and vulnerability analyses of information systems, system components, and information system services prior to delivery are critical to the effective operation of those systems, components, and services. Threat and vulnerability analyses at this phase of the life cycle help to ensure that design or implementation changes have been accounted for, and that any new vulnerabilities created as a result of those changes have been reviewed and mitigated."&nbsp;&nbsp;&nbsp;&nbsp;PM-15,RA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (3)&nbsp;&nbsp;&nbsp;&nbsp;INDEPENDENT VERIFICATION OF ASSESSMENT PLANS / EVIDENCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Independent agents have the necessary qualifications (i.e., expertise, skills, training, and experience) to verify the correct implementation of developer security assessment plans."&nbsp;&nbsp;&nbsp;&nbsp;AT-3,CA-7,RA-5,SA-12
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (3)(a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Requires an independent agent satisfying [Assignment: organization-defined independence criteria] to verify the correct implementation of the developer security assessment plan and the evidence produced during security testing/evaluation; and"
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (4)&nbsp;&nbsp;&nbsp;&nbsp;MANUAL CODE REVIEWS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to perform a manual code review of [Assignment: organization-defined specific code] using [Assignment: organization-defined processes, procedures, and/or techniques]."&nbsp;&nbsp;&nbsp;&nbsp;"Manual code reviews are usually reserved for the critical software and firmware components of information systems. Such code reviews are uniquely effective at identifying weaknesses that require knowledge of the applicationï¿½s requirements or context which are generally unavailable to more automated analytic tools and techniques such as static or dynamic analysis. Components benefiting from manual review include for example, verifying access control matrices against application controls and reviewing more detailed aspects of cryptographic implementations and controls."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (5)&nbsp;&nbsp;&nbsp;&nbsp;PENETRATION TESTING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to perform penetration testing at [Assignment: organization-defined breadth/depth] and with [Assignment: organization-defined constraints]."&nbsp;&nbsp;&nbsp;&nbsp;"Penetration testing is an assessment methodology in which assessors, using all available information technology product and/or information system documentation (e.g., product/system design specifications, source code, and administrator/operator manuals) and working under specific constraints, attempt to circumvent implemented security features of information technology products and information systems. Penetration testing can include, for example, white, gray, or black box testing with analyses performed by skilled security professionals simulating adversary actions. The objective of penetration testing is to uncover potential vulnerabilities in information technology products and information systems resulting from implementation errors, configuration faults, or other operational deployment weaknesses or deficiencies. Penetration tests can be performed in conjunction with automated and manual code reviews to provide greater levels of analysis than would ordinarily be possible."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (6)&nbsp;&nbsp;&nbsp;&nbsp;ATTACK SURFACE REVIEWS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to perform attack surface reviews."&nbsp;&nbsp;&nbsp;&nbsp;"Attack surfaces of information systems are exposed areas that make those systems more vulnerable to cyber attacks. This includes any accessible areas where weaknesses or deficiencies in information systems (including the hardware, software, and firmware components) provide opportunities for adversaries to exploit vulnerabilities. Attack surface reviews ensure that developers: (i) analyze both design and implementation changes to information systems; and (ii) mitigate attack vectors generated as a result of the changes. Correction of identified flaws includes, for example, deprecation of unsafe functions."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (7)&nbsp;&nbsp;&nbsp;&nbsp;VERIFY SCOPE OF TESTING / EVALUATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to verify that the scope of security testing/evaluation provides complete coverage of required security controls at [Assignment: organization-defined depth of testing/evaluation]."&nbsp;&nbsp;&nbsp;&nbsp;"Verifying that security testing/evaluation provides complete coverage of required security controls can be accomplished by a variety of analytic techniques ranging from informal to formal. Each of these techniques provides an increasing level of assurance corresponding to the degree of formality of the analysis. Rigorously demonstrating security control coverage at the highest levels of assurance can be provided by the use of formal modeling and analysis techniques including correlation between control implementation and corresponding test cases."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-11 (8)&nbsp;&nbsp;&nbsp;&nbsp;DYNAMIC CODE ANALYSIS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to employ dynamic code analysis tools to identify common flaws and document the results of the analysis."&nbsp;&nbsp;&nbsp;&nbsp;"Dynamic code analysis provides run-time verification of software programs, using tools capable of monitoring programs for memory corruption, user privilege issues, and other potential security problems. Dynamic code analysis employs run-time tools to help to ensure that security functionality performs in the manner in which it was designed. A specialized type of dynamic analysis, known as fuzz testing, induces program failures by deliberately introducing malformed or random data into software programs. Fuzz testing strategies derive from the intended use of applications and the functional and design specifications for the applications. To understand the scope of dynamic code analysis and hence the assurance provided, organizations may also consider conducting code coverage analysis (checking the degree to which the code has been tested using metrics such as percent of subroutines tested or percent of program statements called during execution of the test suite) and/or concordance analysis (checking for words that are out of place in software code such as non-English language words or derogatory terms)."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-13&nbsp;&nbsp;&nbsp;&nbsp;TRUSTWORTHINESS&nbsp;&nbsp;&nbsp;&nbsp;P0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"This control helps organizations to make explicit trustworthiness decisions when designing, developing, and implementing information systems that are needed to conduct critical organizational missions/business functions. Trustworthiness is a characteristic/property of an information system that expresses the degree to which the system can be expected to preserve the confidentiality, integrity, and availability of the information it processes, stores, or transmits.  Trustworthy information systems are systems that are capable of being trusted to operate within defined levels of risk despite the environmental disruptions, human errors, and purposeful attacks that are expected to occur in the specified environments of operation. Trustworthy systems are important to mission/business success. Two factors affecting the trustworthiness of information systems include: (i) security functionality (i.e., the security features, functions, and/or mechanisms employed within the system and its environment of operation); and (ii) security assurance (i.e., the grounds for confidence that the security functionality is effective in its application). Developers, implementers, operators, and maintainers of organizational information systems can increase the level of assurance (and trustworthiness), for example, by employing well-defined security policy models, structured and rigorous hardware, software, and firmware development techniques, sound system/security engineering principles, and secure configuration settings (defined by a set of assurance-related security controls in Appendix E). Assurance is also based on the assessment of evidence produced during the system development life cycle. Critical missions/business functions are supported by high-impact systems and the associated assurance requirements for such systems. The additional assurance controls in Table E-4 in Appendix E (designated as optional) can be used to develop and implement high-assurance solutions for specific information systems and system components using the concept of overlays described in Appendix I. Organizations select assurance overlays that have been developed, validated, and approved for community adoption (e.g., cross-organization, governmentwide), limiting the development of such overlays on an organization-by-organization basis. Organizations can conduct criticality analyses as described in SA-14, to determine the information systems, system components, or information system services that require high-assurance solutions. Trustworthiness requirements and assurance overlays can be described in the security plans for organizational information systems."&nbsp;&nbsp;&nbsp;&nbsp;RA-2,SA-4,SA-8,SA-14,SC-3
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;SA-15a.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Requires the developer of the information system, system component, or information system service to follow a documented development process that:"
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (1)&nbsp;&nbsp;&nbsp;&nbsp;QUALITY METRICS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Organizations use quality metrics to establish minimum acceptable levels of information system quality. Metrics may include quality gates which are collections of completion criteria or sufficiency standards representing the satisfactory execution of particular phases of the system development project. A quality gate, for example, may require the elimination of all compiler warnings or an explicit determination that the warnings have no impact on the effectiveness of required security capabilities. During the execution phases of development projects, quality gates provide clear, unambiguous indications of progress. Other metrics apply to the entire development project. These metrics can include defining the severity thresholds of vulnerabilities, for example, requiring no known vulnerabilities in the delivered information system with a Common Vulnerability Scoring System (CVSS) severity of Medium or High."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (2)&nbsp;&nbsp;&nbsp;&nbsp;SECURITY TRACKING TOOLS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to select and employ a security tracking tool for use during the development process."&nbsp;&nbsp;&nbsp;&nbsp;"Information system development teams select and deploy security tracking tools, including, for example, vulnerability/work item tracking systems that facilitate assignment, sorting, filtering, and tracking of completed work items or tasks associated with system development processes."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (3)&nbsp;&nbsp;&nbsp;&nbsp;CRITICALITY ANALYSIS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to perform a criticality analysis at [Assignment: organization-defined breadth/depth] and at [Assignment: organization-defined decision points in the system development life cycle]."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement provides developer input to the criticality analysis performed by organizations in SA-14. Developer input is essential to such analysis because organizations may not have access to detailed design documentation for information system components that are developed as commercial off-the-shelf (COTS) information technology products (e.g., functional specifications, high-level designs, low-level designs, and source code/hardware schematics)."&nbsp;&nbsp;&nbsp;&nbsp;SA-4,SA-14
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (4)&nbsp;&nbsp;&nbsp;&nbsp;THREAT MODELING / VULNERABILITY ANALYSIS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires that developers perform threat modeling and a vulnerability analysis for the information system at [Assignment: organization-defined breadth/depth] that:"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SA-4
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (5)&nbsp;&nbsp;&nbsp;&nbsp;ATTACK SURFACE REDUCTION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to reduce attack surfaces to [Assignment: organization-defined thresholds]."&nbsp;&nbsp;&nbsp;&nbsp;"Attack surface reduction is closely aligned with developer threat and vulnerability analyses and information system architecture and design. Attack surface reduction is a means of reducing risk to organizations by giving attackers less opportunity to exploit weaknesses or deficiencies (i.e., potential vulnerabilities) within information systems, information system components, and information system services. Attack surface reduction includes, for example, applying the principle of least privilege, employing layered defenses, applying the principle of least functionality (i.e., restricting ports, protocols, functions, and services), deprecating unsafe functions, and eliminating application programming interfaces (APIs) that are vulnerable to cyber attacks."&nbsp;&nbsp;&nbsp;&nbsp;CM-7
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (6)&nbsp;&nbsp;&nbsp;&nbsp;CONTINUOUS IMPROVEMENT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to implement an explicit process to continuously improve the development process."&nbsp;&nbsp;&nbsp;&nbsp;"Developers of information systems, information system components, and information system services consider the effectiveness/efficiency of current development processes for meeting quality objectives and addressing security capabilities in current threat environments."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (7)&nbsp;&nbsp;&nbsp;&nbsp;AUTOMATED VULNERABILITY ANALYSIS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (8)&nbsp;&nbsp;&nbsp;&nbsp;REUSE OF THREAT / VULNERABILITY INFORMATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to use threat modeling and vulnerability analyses from similar systems, components, or services to inform the current development process."&nbsp;&nbsp;&nbsp;&nbsp;"Analysis of vulnerabilities found in similar software applications can inform potential design or implementation issues for information systems under development. Similar information systems or system components may exist within developer organizations. Authoritative vulnerability information is available from a variety of public and private sector sources including, for example, the National Vulnerability Database."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (10)&nbsp;&nbsp;&nbsp;&nbsp;INCIDENT RESPONSE PLAN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to provide an incident response plan."&nbsp;&nbsp;&nbsp;&nbsp;"The incident response plan for developers of information systems, system components, and information system services is incorporated into organizational incident response plans to provide the type of incident response information not readily available to organizations. Such information may be extremely helpful, for example, when organizations respond to vulnerabilities in commercial off-the-shelf (COTS) information technology products."&nbsp;&nbsp;&nbsp;&nbsp;IR-8
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-15 (11)&nbsp;&nbsp;&nbsp;&nbsp;ARCHIVE INFORMATION SYSTEM / COMPONENT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system or system component to archive the system or component to be released or delivered together with the corresponding evidence supporting the final security review."&nbsp;&nbsp;&nbsp;&nbsp;"Archiving relevant documentation from the development process can provide a readily available baseline of information that can be helpful during information system/component upgrades or modifications."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-16&nbsp;&nbsp;&nbsp;&nbsp;DEVELOPER-PROVIDED TRAINING&nbsp;&nbsp;&nbsp;&nbsp;P2&nbsp;&nbsp;&nbsp;&nbsp;HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to provide [Assignment: organization-defined training] on the correct use and operation of the implemented security functions, controls, and/or mechanisms."&nbsp;&nbsp;&nbsp;&nbsp;"This control applies to external and internal (in-house) developers. Training of personnel is an essential element to ensure the effectiveness of security controls implemented within organizational information systems. Training options include, for example, classroom-style training, web-based/computer-based training, and hands-on training. Organizations can also request sufficient training materials from developers to conduct in-house training or offer self-training to organizational personnel. Organizations determine the type of training necessary and may require different types of training for different security functions, controls, or mechanisms."&nbsp;&nbsp;&nbsp;&nbsp;AT-2,AT-3,SA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17&nbsp;&nbsp;&nbsp;&nbsp;DEVELOPER SECURITY ARCHITECTURE AND DESIGN&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to produce a design specification and security architecture that:"&nbsp;&nbsp;&nbsp;&nbsp;"This control is primarily directed at external developers, although it could also be used for internal (in-house) development. In contrast, PL-8 is primarily directed at internal developers to help ensure that organizations develop an information security architecture and such security architecture is integrated or tightly coupled to the enterprise architecture. This distinction is important if/when organizations outsource the development of information systems, information system components, or information system services to external entities, and there is a requirement to demonstrate consistency with the organizationï¿½s enterprise architecture and information security architecture."&nbsp;&nbsp;&nbsp;&nbsp;PL-8,PM-7,SA-3,SA-8
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (1)&nbsp;&nbsp;&nbsp;&nbsp;FORMAL POLICY MODEL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Formal models describe specific behaviors or security policies using formal languages, thus enabling the correctness of those behaviors/policies to be formally proven. Not all components of information systems can be modeled, and generally, formal specifications are scoped to specific behaviors or policies of interest (e.g., nondiscretionary access control policies). Organizations choose the particular formal modeling language and approach based on the nature of the behaviors/policies to be described and the available tools. Formal modeling tools include, for example, Gypsy and Zed."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (2)&nbsp;&nbsp;&nbsp;&nbsp;SECURITY-RELEVANT COMPONENTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Security-relevant hardware, software, and firmware represent the portion of the information system, component, or service that must be trusted to perform correctly in order to maintain required security properties."&nbsp;&nbsp;&nbsp;&nbsp;SA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (3)&nbsp;&nbsp;&nbsp;&nbsp;FORMAL CORRESPONDENCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Correspondence is an important part of the assurance gained through modeling. It demonstrates that the implementation is an accurate transformation of the model, and that any additional code or implementation details present have no impact on the behaviors or policies being modeled. Formal methods can be used to show that the high-level security properties are satisfied by the formal information system description, and that the formal system description is correctly implemented by a description of some lower level, for example a hardware description. Consistency between the formal top-level specification and the formal policy models is generally not amenable to being fully proven. Therefore, a combination of formal/informal methods may be needed to show such consistency. Consistency between the formal top-level specification and the implementation may require the use of an informal demonstration due to limitations in the applicability of formal methods to prove that the specification accurately reflects the implementation. Hardware, software, and firmware mechanisms strictly internal to security-relevant hardware, software, and firmware include, for example, mapping registers and direct memory input/output."&nbsp;&nbsp;&nbsp;&nbsp;SA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (4)&nbsp;&nbsp;&nbsp;&nbsp;INFORMAL CORRESPONDENCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;"Correspondence is an important part of the assurance gained through modeling. It demonstrates that the implementation is an accurate transformation of the model, and that any additional code or implementation details present has no impact on the behaviors or policies being modeled. Consistency between the descriptive top-level specification (i.e., high-level/low-level design) and the formal policy model is generally not amenable to being fully proven. Therefore, a combination of formal/informal methods may be needed to show such consistency. Hardware, software, and firmware mechanisms strictly internal to security-relevant hardware, software, and firmware include, for example, mapping registers and direct memory input/output."&nbsp;&nbsp;&nbsp;&nbsp;SA-5
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (5)&nbsp;&nbsp;&nbsp;&nbsp;CONCEPTUALLY SIMPLE DESIGN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to:"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SC-3
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (6)&nbsp;&nbsp;&nbsp;&nbsp;STRUCTURE FOR TESTING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to structure security-relevant hardware, software, and firmware to facilitate testing."&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SA-11
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-17 (7)&nbsp;&nbsp;&nbsp;&nbsp;STRUCTURE FOR LEAST PRIVILEGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service to structure security-relevant hardware, software, and firmware to facilitate controlling access with least privilege."&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AC-5,AC-6
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-19&nbsp;&nbsp;&nbsp;&nbsp;COMPONENT AUTHENTICITY&nbsp;&nbsp;&nbsp;&nbsp;P0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Sources of counterfeit components include, for example, manufacturers, developers, vendors, and contractors. Anti-counterfeiting policy and procedures support tamper resistance and provide a level of protection against the introduction of malicious code. External reporting organizations include, for example, US-CERT."&nbsp;&nbsp;&nbsp;&nbsp;PE-3,SA-12,SI-7
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-20&nbsp;&nbsp;&nbsp;&nbsp;CUSTOMIZED DEVELOPMENT OF CRITICAL COMPONENTS&nbsp;&nbsp;&nbsp;&nbsp;P0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization re-implements or custom develops [Assignment: organization-defined critical information system components]."&nbsp;&nbsp;&nbsp;&nbsp;"Organizations determine that certain information system components likely cannot be trusted due to specific threats to and vulnerabilities in those components, and for which there are no viable security controls to adequately mitigate the resulting risk. Re-implementation or custom development of such components helps to satisfy requirements for higher assurance. This is accomplished by initiating changes to system components (including hardware, software, and firmware) such that the standard attacks by adversaries are less likely to succeed. In situations where no alternative sourcing is available and organizations choose not to re-implement or custom develop critical information system components, additional safeguards can be employed (e.g., enhanced auditing, restrictions on source code and system utility access, and protection from deletion of system and application files."&nbsp;&nbsp;&nbsp;&nbsp;CP-2,SA-8,SA-14
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-21&nbsp;&nbsp;&nbsp;&nbsp;DEVELOPER SCREENING&nbsp;&nbsp;&nbsp;&nbsp;P0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires that the developer of [Assignment: organization-defined information system, system component, or information system service]:"&nbsp;&nbsp;&nbsp;&nbsp;"Because the information system, system component, or information system service may be employed in critical activities essential to the national and/or economic security interests of the United States, organizations have a strong interest in ensuring that the developer is trustworthy. The degree of trust required of the developer may need to be consistent with that of the individuals accessing the information system/component/service once deployed. Examples of authorization and personnel screening criteria include clearance, satisfactory background checks, citizenship, and nationality. Trustworthiness of developers may also include a review and analysis of company ownership and any relationships the company has with entities potentially affecting the quality/reliability of the systems, components, or services being developed."&nbsp;&nbsp;&nbsp;&nbsp;PS-3,PS-7
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-21 (1)&nbsp;&nbsp;&nbsp;&nbsp;VALIDATION OF SCREENING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires the developer of the information system, system component, or information system service take [Assignment: organization-defined actions] to ensure that the required access authorizations and screening criteria are satisfied."&nbsp;&nbsp;&nbsp;&nbsp;"Satisfying required access authorizations and personnel screening criteria includes, for example, providing a listing of all the individuals authorized to perform development activities on the selected information system, system component, or information system service so that organizations can validate that the developer has satisfied the necessary authorization and screening requirements."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;SA-22a.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Replaces information system components when support for the components is no longer available from the developer, vendor, or manufacturer; and"
</li>
<li>SYSTEM AND SERVICES ACQUISITION&nbsp;&nbsp;&nbsp;&nbsp;SA-22 (1)&nbsp;&nbsp;&nbsp;&nbsp;ALTERNATIVE SOURCES FOR CONTINUED SUPPORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization provides [Selection (one or more): in-house support; [Assignment: organization-defined support from external providers]] for unsupported information system components."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement addresses the need to provide continued support for selected information system components that are no longer supported by the original developers, vendors, or manufacturers when such components remain essential to mission/business operations. Organizations can establish in-house support, for example, by developing customized patches for critical software components or secure the services of external providers who through contractual relationships, provide ongoing support for the designated unsupported components. Such contractual relationships can include, for example, Open Source Software value-added vendors."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND COMMUNICATIONS PROTECTION&nbsp;&nbsp;&nbsp;&nbsp;SC-31&nbsp;&nbsp;&nbsp;&nbsp;COVERT CHANNEL ANALYSIS&nbsp;&nbsp;&nbsp;&nbsp;P0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Developers are in the best position to identify potential areas within systems that might lead to covert channels. Covert channel analysis is a meaningful activity when there is the potential for unauthorized information flows across security domains, for example, in the case of information systems containing export-controlled information and having connections to external networks (i.e., networks not controlled by organizations). Covert channel analysis is also meaningful for multilevel secure (MLS) information systems, multiple security level (MSL) systems, and cross-domain systems."&nbsp;&nbsp;&nbsp;&nbsp;AC-3,AC-4,PL-2
</li>
<li>SYSTEM AND COMMUNICATIONS PROTECTION&nbsp;&nbsp;&nbsp;&nbsp;SC-31 (2)&nbsp;&nbsp;&nbsp;&nbsp;MAXIMUM BANDWIDTH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization reduces the maximum bandwidth for identified covert [Selection (one or more); storage; timing] channels to [Assignment: organization-defined values]."&nbsp;&nbsp;&nbsp;&nbsp;"Information system developers are in the best position to reduce the maximum bandwidth for identified covert storage and timing channels."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-3&nbsp;&nbsp;&nbsp;&nbsp;MALICIOUS CODE PROTECTION&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;LOW,MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"Information system entry and exit points include, for example, firewalls, electronic mail servers, web servers, proxy servers, remote-access servers, workstations, notebook computers, and mobile devices. Malicious code includes, for example, viruses, worms, Trojan horses, and spyware. Malicious code can also be encoded in various formats (e.g., UUENCODE, Unicode), contained within compressed or hidden files, or hidden in files using steganography. Malicious code can be transported by different means including, for example, web accesses, electronic mail, electronic mail attachments, and portable storage devices. Malicious code insertions occur through the exploitation of information system vulnerabilities. Malicious code protection mechanisms include, for example, anti-virus signature definitions and reputation-based technologies. A variety of technologies and methods exist to limit or eliminate the effects of malicious code. Pervasive configuration management and comprehensive software integrity controls may be effective in preventing execution of unauthorized code. In addition to commercial off-the-shelf software, malicious code may also be present in custom-built software. This could include, for example, logic bombs, back doors, and other types of cyber attacks that could affect organizational missions/business functions. Traditional malicious code protection mechanisms cannot always detect such code. In these situations, organizations rely instead on other safeguards including, for example, secure coding practices, configuration management and control, trusted procurement processes, and monitoring practices to help ensure that software does not perform functions other than the functions intended. Organizations may determine that in response to the detection of malicious code, different actions may be warranted. For example, organizations can define actions in response to malicious code detection during periodic scans, actions in response to detection of malicious downloads, and/or actions in response to detection of maliciousness when attempting to open or execute files."&nbsp;&nbsp;&nbsp;&nbsp;CM-3,MP-2,SA-4,SA-8,SA-12,SA-13,SC-7,SC-26,SC-44,SI-2,SI-4,SI-7
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-4 (23)&nbsp;&nbsp;&nbsp;&nbsp;HOST-BASED DEVICES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization implements [Assignment: organization-defined host-based monitoring mechanisms] at [Assignment: organization-defined information system components]."&nbsp;&nbsp;&nbsp;&nbsp;"Information system components where host-based monitoring can be implemented include, for example, servers, workstations, and mobile devices. Organizations consider employing host-based monitoring mechanisms from multiple information technology product developers."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-7 (2)&nbsp;&nbsp;&nbsp;&nbsp;AUTOMATED NOTIFICATIONS OF INTEGRITY VIOLATIONS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization employs automated tools that provide notification to [Assignment: organization-defined personnel or roles] upon discovering discrepancies during integrity verification."&nbsp;&nbsp;&nbsp;&nbsp;"The use of automated tools to report integrity violations and to notify organizational personnel in a timely matter is an essential precursor to effective risk response. Personnel having an interest in integrity violations include, for example, mission/business owners, information system owners, systems administrators, software developers, systems integrators, and information security officers."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-7 (12)&nbsp;&nbsp;&nbsp;&nbsp;INTEGRITY VERIFICATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization requires that the integrity of [Assignment: organization-defined user-installed software] be verified prior to execution."&nbsp;&nbsp;&nbsp;&nbsp;"Organizations verify the integrity of user-installed software prior to execution to reduce the likelihood of executing malicious code or code that contains errors from unauthorized modifications. Organizations consider the practicality of approaches to verifying software integrity including, for example, availability of checksums of adequate trustworthiness from software developers or vendors."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-7 (13)&nbsp;&nbsp;&nbsp;&nbsp;CODE EXECUTION IN PROTECTED ENVIRONMENTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The organization allows execution of binary or machine-executable code obtained from sources with limited or no warranty and without the provision of source code only in confined physical or virtual machine environments and with the explicit approval of [Assignment: organization-defined personnel or roles]."&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement applies to all sources of binary or machine-executable code including, for example, commercial software/firmware and open source software."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-7 (14)&nbsp;&nbsp;&nbsp;&nbsp;BINARY OR MACHINE EXECUTABLE CODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The organization:"&nbsp;&nbsp;&nbsp;&nbsp;"This control enhancement applies to all sources of binary or machine-executable code including, for example, commercial software/firmware and open source software. Organizations assess software products without accompanying source code from sources with limited or no warranty for potential security impacts. The assessments address the fact that these types of software products may be very difficult to review, repair, or extend, given that organizations, in most cases, do not have access to the original source code, and there may be no owners who could make such repairs on behalf of organizations."&nbsp;&nbsp;&nbsp;&nbsp;SA-5
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;SI-7 (14)(a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Prohibits the use of binary or machine-executable code from sources with limited or no warranty and without the provision of source code; and"
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;SI-7 (14)(b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Provides exceptions to the source code requirement only for compelling mission/operational requirements and with the approval of the authorizing official."
</li>
<li>SYSTEM AND INFORMATION INTEGRITY&nbsp;&nbsp;&nbsp;&nbsp;SI-10&nbsp;&nbsp;&nbsp;&nbsp;INFORMATION INPUT VALIDATION&nbsp;&nbsp;&nbsp;&nbsp;P1&nbsp;&nbsp;&nbsp;&nbsp;MODERATE,HIGH&nbsp;&nbsp;&nbsp;&nbsp;"The information system checks the validity of [Assignment: organization-defined information inputs]."&nbsp;&nbsp;&nbsp;&nbsp;"Checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, and acceptable values) verifies that inputs match specified definitions for format and content. Software applications typically follow well-defined protocols that use structured messages (i.e., commands or queries) to communicate between software modules or system components. Structured messages can contain raw or unstructured data interspersed with metadata or control information. If software applications use attacker-supplied inputs to construct structured messages without properly encoding such messages, then the attacker could insert malicious commands or special characters that can cause the data to be interpreted as control information or metadata. Consequently, the module or component that receives the tainted output will perform the wrong operations or otherwise interpret the data incorrectly. Prescreening inputs prior to passing to interpreters prevents the content from being unintentionally interpreted as commands. Input validation helps to ensure accurate and correct inputs and prevent attacks such as cross-site scripting and a variety of injection attacks."&nbsp;&nbsp;&nbsp;&nbsp;
</li>
</ol>
</body>
</html>
